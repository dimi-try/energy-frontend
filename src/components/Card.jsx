import React from "react";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import { toast } from "react-toastify";

import api from "../hooks/api";
import { formatTimestamp } from "../hooks/formatDate";

import ImageUpload from "./ImageUpload";
import Button from "./Button";

import "./Card.css";

//–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
const Card = ({
  children,
  className = "",
  type = "container",
  review,
  criteria,
  isProfile = false,
  userId,
  token,
  onReviewUpdated,
  rank,
  onClick,
}) => {
  //—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
  const [isEditing, setIsEditing] = React.useState(false);
  //—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –æ—Ç–∑—ã–≤–∞
  const [editReview, setEditReview] = React.useState(
    review
      ? {
          review_text: review.review_text || "",
          ratings: review.ratings.reduce(
            (acc, curr) => ({ ...acc, [curr.criteria_id]: curr.rating_value }),
            {}
          ),
          image: null,
          image_url: review.image_url || "",
        }
      : {}
  );
  //—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∑–≤–µ–∑–¥ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  const [hoveredStars, setHoveredStars] = React.useState({});

  //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–≤–µ–∑–¥–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
  const handleStarClick = (criterionId, rating) => {
    setEditReview({
      ...editReview,
      ratings: { ...editReview.ratings, [criterionId]: rating },
    });
  };

  //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∑–≤–µ–∑–¥—É
  const handleStarHover = (criterionId, rating) => {
    setHoveredStars({ ...hoveredStars, [criterionId]: rating });
  };

  //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞ —Å–æ –∑–≤–µ–∑–¥—ã
  const handleStarLeave = (criterionId) => {
    setHoveredStars({ ...hoveredStars, [criterionId]: 0 });
  };

  //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
  const handleUpdate = async (e) => {
    e.preventDefault();
    try {
      //–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –≤—ã–±—Ä–∞–Ω–æ
      let imageUrl = editReview.image_url;
      if (editReview.image) {
        const formData = new FormData();
        formData.append("file", editReview.image);
        const uploadRes = await api.post("/reviews/upload-image/", formData, {
          headers: { "Content-Type": "multipart/form-data" },
        });
        imageUrl = uploadRes.data.image_url;
      }

      //—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –æ—Ü–µ–Ω–æ–∫
      const ratings = Object.entries(editReview.ratings)
        .filter(([_, value]) => value !== "")
        .map(([criteriaId, value]) => ({
          criteria_id: parseInt(criteriaId),
          rating_value: parseFloat(value),
        }));

      //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ü–µ–Ω–æ–∫
      if (ratings.length === 0) {
        toast.error("–û—Ü–µ–Ω–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!");
        return;
      }

      //–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
      await api.put(`/reviews/${review.id}`, {
        review_text: editReview.review_text || null,
        ratings,
        image_url: imageUrl,
      });
      setIsEditing(false);
      onReviewUpdated();
      toast.success("–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
    } catch (err) {
      toast.error(err.response?.data?.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.");
    }
  };

  //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
  const handleDelete = async () => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤?")) {
      try {
        await api.delete(`/reviews/${review.id}`);
        onReviewUpdated();
        toast.success("–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
      } catch (err) {
        toast.error(err.response?.data?.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.");
      }
    }
  };

  //–∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
  const motionProps = {
    initial: { opacity: 0, scale: 0.95 },
    animate: { opacity: 1, scale: 1 },
    transition: { duration: 0.6, ease: "easeOut" },
  };

  //–∫–ª–∞—Å—Å –¥–ª—è –º–µ–¥–∞–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–Ω–≥–∞
  const medalClass =
    rank === 1 ? "medal-gold" : rank === 2 ? "medal-silver" : rank === 3 ? "medal-bronze" : "medal-default";

  //–∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–∏–ø–∞ list –¥–ª—è —Ç–æ–ø–æ–≤
  if (type === "list") {
    return (
      <motion.div {...motionProps} className={`card-base card-list ${className}`} onClick={onClick}>
        {/* —Ä–∞–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        {rank && <span className={`card-rank ${medalClass}`}>{rank}</span>}
        {children}
      </motion.div>
    );
  }

  //–∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–∏–ø–∞ review –¥–ª—è –æ—Ç–∑—ã–≤–∞
  if (type === "review") {
    return (
      <motion.div {...motionProps} className={`card-base card-review ${className}`}>
        {/* –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–∑—ã–≤–∞ */}
        <div className="card-header">
          <span className="card-review-item">
            {isProfile && review.energy_id ? (
              <Link to={`/energies/${review.energy_id}`} className="details-link">
                ü•§ {review.brand} {review.energy}
              </Link>
            ) : (
              <div className="card-review-user">
                {/* –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                {review.user?.image_url ? (
                  <img
                    src={`${process.env.REACT_APP_BACKEND_URL}/${review.user.image_url}`}
                    alt={review.user?.username || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
                    className="card-user-avatar"
                  />
                ) : (
                  <span className="card-user-placeholder">üë§</span>
                )}
                {/* –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                {userId && token ? (
                  <Link to={`/profile/${review.user_id}`} className="card-username">
                    {review.user?.username || "–ò–º—è –ø—É—Å—Ç–æ–µ"}
                  </Link>
                ) : (
                  <span className="card-username">{review.user?.username || "–ò–º—è –ø—É—Å—Ç–æ–µ"}</span>
                )}
              </div>
            )}
          </span>
        </div>

        {/* —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞ */}
        {review.average_rating_review !== null && (
          <p className="card-review-average-rating">
            <span className="card-star">‚òÖ</span>
            <span className="card-rating">{Number(review.average_rating_review).toFixed(1)}/10</span>
          </p>
        )}

        {/* –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ */}
        {review.image_url && (
          <div className="card-review-image">
            <img src={`${process.env.REACT_APP_BACKEND_URL}/${review.image_url}`} alt="–û—Ç–∑—ã–≤" />
          </div>
        )}

        {/* —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ */}
        {isEditing ? (
          <form onSubmit={handleUpdate} className="card-edit-form">
            <textarea
              name="review_text"
              placeholder="–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={editReview.review_text}
              onChange={(e) => setEditReview({ ...editReview, review_text: e.target.value })}
            />
            <ImageUpload
              image={editReview.image}
              imageUrl={editReview.image_url}
              onImageChange={(file) => setEditReview({ ...editReview, image: file, image_url: "" })}
              backendUrl={process.env.REACT_APP_BACKEND_URL}
            />
            {criteria.map((criterion) => (
              <div key={criterion.id} className="card-star-criteria">
                <label>{criterion.name}</label>
                <div
                  className="card-stars-rating"
                  onMouseLeave={() => handleStarLeave(criterion.id)}
                >
                  {[...Array(10)].map((_, index) => {
                    const ratingValue = index + 1;
                    return (
                      <span
                        key={index}
                        className={`card-star-rating ${
                          ratingValue <= (hoveredStars[criterion.id] || editReview.ratings[criterion.id] || 0)
                            ? "filled"
                            : ""
                        }`}
                        onClick={() => handleStarClick(criterion.id, ratingValue)}
                        onMouseEnter={() => handleStarHover(criterion.id, ratingValue)}
                      >
                        ‚òÖ
                      </span>
                    );
                  })}
                </div>
              </div>
            ))}
            <div className="card-edit-buttons">
              <Button type="submit" variant="primary">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </Button>
              <Button variant="danger" onClick={() => setIsEditing(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </form>
        ) : (
          <>
            <p>{review.review_text || "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"}</p>
            {review.ratings?.map((rating) => (
              <div key={rating.id} className="card-rating-item">
                <span>
                  {criteria.find((c) => c.id === rating.criteria_id)?.name ||
                    `–ö—Ä–∏—Ç–µ—Ä–∏–π ${rating.criteria_id}`}
                  :
                </span>
                <span className="card-rating">{rating.rating_value}/10</span>
              </div>
            ))}
          </>
        )}

        {/* –¥–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞ */}
        <div className="card-footer">
          <span className="card-review-date">üìÖ {formatTimestamp(review.created_at)}</span>
        </div>

        {/* –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è */}
        {userId && review.user_id === userId && !isEditing && (
          <div className="card-review-actions">
            <Button variant="primary" onClick={() => setIsEditing(true)}>
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </Button>
            <Button variant="danger" onClick={handleDelete}>
              –£–¥–∞–ª–∏—Ç—å
            </Button>
          </div>
        )}
      </motion.div>
    );
  }

  //–∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–∏–ø–∞ container –¥–ª—è –æ–±–µ—Ä—Ç–∫–∏
  return (
    <motion.div {...motionProps} className={`card-base card-container ${className}`}>
      {children}
    </motion.div>
  );
};

export default Card;