import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { ToastContainer, toast } from "react-toastify";

import api from "../../hooks/api";
import { formatTimestamp } from "../../hooks/formatDate";

import Loader from "../../components/Loader";
import Error from "../../components/Error";
import Card from "../../components/Card";
import Button from "../../components/Button";
import Pagination from "../../components/Pagination";

import "./UserAdminPage.css";

const UserAdminPage = ({ token }) => {
  const [users, setUsers] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);
  const [page, setPage] = useState(() => {
    const savedPage = sessionStorage.getItem("user-admin-page");
    return savedPage ? parseInt(savedPage, 10) : 1;
  });
  const [totalPages, setTotalPages] = useState(1);
  const usersPerPage = 10;

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  const fetchUsers = async () => {
    setLoading(true);
    setError(null);
    try {
      const [usersResponse, countResponse] = await Promise.all([
        api.get(`/users/?limit=${usersPerPage}&offset=${(page - 1) * usersPerPage}`, {
          headers: { Authorization: `Bearer ${token}` },
        }),
        api.get(`/users/count/`, {
          headers: { Authorization: `Bearer ${token}` },
        }),
      ]);
      setUsers(usersResponse.data);
      setTotalPages(Math.ceil(countResponse.data.total / usersPerPage));
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + (err.response?.data?.detail || err.message));
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    fetchUsers();
  }, [page, token]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    sessionStorage.setItem("user-admin-page", page);
  }, [page]);

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleDeleteUser = async (userId) => {
    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?")) {
      try {
        await api.delete(`/users/${userId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        await fetchUsers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        toast.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
      } catch (err) {
        toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + (err.response?.data?.detail || err.message));
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
  const handleRetry = () => {
    fetchUsers();
  };

  if (loading) {
    return <Loader />;
  }

  if (error) {
    return (
      <Card type="container">
        <Error message={error} />
        <Button variant="primary" onClick={handleRetry}>
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </Button>
      </Card>
    );
  }

  return (
    <div className="container">
      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="colored"
      />

      <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h1>

      <Card type="container">
        <div className="list-container">
          {users.length > 0 ? (
            <>
              {users.map((user) => (
                <Card key={user.id} type="container">
                  <div className="user-avatar-container">
                    {user.image_url ? (
                      <img
                        src={`${process.env.REACT_APP_BACKEND_URL}/${user.image_url}`}
                        alt={user.username || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
                        className="user-avatar"
                        loading="lazy"
                      />
                    ) : (
                      <span className="user-placeholder">üë§</span>
                    )}
                  </div>
                  <div className="user-info">
                    <p>
                      <strong>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </strong>
                      <Link to={`/profile/${user.id}`} className="details-link">
                        {user.id}
                      </Link>
                    </p>
                    <p><strong>–ò–º—è: </strong>{user.username || "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
                    <p><strong>–ü—Ä–µ–º–∏—É–º: </strong>{user.is_premium ? "–î–∞" : "–ù–µ—Ç"}</p>
                    <p><strong>–°–æ–∑–¥–∞–Ω: </strong>{formatTimestamp(user.created_at)}</p>
                  </div>
                  <div className="user-actions">
                    <Button variant="danger" onClick={() => handleDeleteUser(user.id)}>
                      –£–¥–∞–ª–∏—Ç—å
                    </Button>
                  </div>
                </Card>
              ))}
              {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ */}
              {totalPages > 1 && (
                <Pagination
                  currentPage={page}
                  totalPages={totalPages}
                  onPageChange={setPage}
                />
              )}
            </>
          ) : (
            <Error message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" />
          )}
        </div>
      </Card>
    </div>
  );
};

export default UserAdminPage;